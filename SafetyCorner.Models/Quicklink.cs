//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     變更這個檔案可能會導致不正確的行為，而且如果已重新產生
//     程式碼，這個檔案將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SafetyCorner.Models
{
    [DataContract(IsReference = true)]
    public partial class Quicklink: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基本屬性
    
        [DataMember]
        public long ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("屬性 'ID' 是物件索引鍵的一部分，因此無法變更。只能在物件不加以追蹤或其處在已加入狀態，才能對索引鍵屬性進行變更。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private long _iD;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string Href
        {
            get { return _href; }
            set
            {
                if (_href != value)
                {
                    _href = value;
                    OnPropertyChanged("Href");
                }
            }
        }
        private string _href;
    
        [DataMember]
        public string Target
        {
            get { return _target; }
            set
            {
                if (_target != value)
                {
                    _target = value;
                    OnPropertyChanged("Target");
                }
            }
        }
        private string _target;
    
        [DataMember]
        public string Text
        {
            get { return _text; }
            set
            {
                if (_text != value)
                {
                    _text = value;
                    OnPropertyChanged("Text");
                }
            }
        }
        private string _text;
    
        [DataMember]
        public Nullable<System.DateTime> Modify_Date
        {
            get { return _modify_Date; }
            set
            {
                if (_modify_Date != value)
                {
                    _modify_Date = value;
                    OnPropertyChanged("Modify_Date");
                }
            }
        }
        private Nullable<System.DateTime> _modify_Date;
    
        [DataMember]
        public string Modify_User
        {
            get { return _modify_User; }
            set
            {
                if (_modify_User != value)
                {
                    _modify_User = value;
                    OnPropertyChanged("Modify_User");
                }
            }
        }
        private string _modify_User;
    
        [DataMember]
        public Nullable<System.DateTime> Create_Date
        {
            get { return _create_Date; }
            set
            {
                if (_create_Date != value)
                {
                    _create_Date = value;
                    OnPropertyChanged("Create_Date");
                }
            }
        }
        private Nullable<System.DateTime> _create_Date;
    
        [DataMember]
        public string Create_User
        {
            get { return _create_User; }
            set
            {
                if (_create_User != value)
                {
                    _create_User = value;
                    OnPropertyChanged("Create_User");
                }
            }
        }
        private string _create_User;
    
        [DataMember]
        public Nullable<long> Enabled
        {
            get { return _enabled; }
            set
            {
                if (_enabled != value)
                {
                    _enabled = value;
                    OnPropertyChanged("Enabled");
                }
            }
        }
        private Nullable<long> _enabled;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
